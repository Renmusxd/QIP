syntax = "proto2";

package distributed;

// Default values needed in many messages
message ComplexVector {
    // Size of both real and imaginary must be the same.
    repeated double real = 1 [packed = true];
    repeated double imag = 2 [packed = true];
}

message ComplexMatrix {
    repeated int32 shape = 1;
    optional ComplexVector data = 3;
}

message Indices {
    repeated int32 index = 1;
}

message State {
    optional Indices indices = 1;
    oneof state {
        ComplexVector vector = 2;
        int64 index = 3; // All zeros except this index which is 1.0
    }
}

// Network communication

message WorkerInformation {
    optional int32 n_qubits = 1;
    optional string address = 2;
    optional int32 port = 3;
}

message ClientInformation {
    optional string name = 1;
}

message HostInformation {
    optional string address = 1;
    optional int32 port = 2;
    oneof hosttype {
        WorkerInformation worker_info = 3;
        ClientInformation client_info = 4;
    }
}

// Use-case specific messages

// Message to send to distributed manager to start worker states
message StateSetup {
    optional int32 n = 1;
    repeated State states = 2;
}

// Response from manager for making a state
message StateHandle {
    oneof handle {
        string state_handle = 1;
        string error_message = 2;
    }
}

// Manager needs to tell workers about each other
message WorkerPartner {
    optional string job_id = 1;
    optional string addr = 2;
    optional int32 port = 3;
    optional int64 state_index_start = 4;
    optional int64 state_index_end = 5;
    optional int64 output_index_start = 6;
    optional int64 output_index_end = 7;
}

// Message to send to each worker to make local state
message WorkerSetup {
    optional int32 n = 1;
    repeated State states = 2;
    optional int64 state_index_start = 3;
    optional int64 state_index_end = 4;
    optional int64 output_index_start = 5;
    optional int64 output_index_end = 6;
    optional string state_handle = 7;

    repeated WorkerPartner partners = 8;

    enum StateType {
        COMPLEX128 = 0;
    }
    optional StateType statetype = 9;
}

// Tell the workers to perform an action.
message MatrixOp {
    optional Indices indices = 1;
    oneof op {
        ComplexMatrix matrix = 2;
        MatrixOp controlled_op = 3;
        bool swap = 4;
    }
}

message KronProd {
    repeated MatrixOp matrices = 1;
}

message MeasureResult {
    optional int32 measured_bits = 1;
    optional double measured_prob = 2;
}

message Measure {
    optional Indices indices = 1;
    optional MeasureResult measure_result = 2;
}

message Sync {
    optional int32 reduce_workers_to = 1 [default = -1];
}

message WorkerOperation {
    // For client to backend, use state_handle, otherwise make a new temporary job_id
    optional string job_id = 1;
    oneof op {
        KronProd kronprod = 3;
        Measure measure = 4;
        bool total_prob = 5;
        Sync sync = 6;
        bool close = 7;
    }
}

// Workers respond with WorkerConfirm to confirm completion of last operation.
message WorkerConfirm {
    oneof msg {
        string job_id = 1;
        string error_message = 2;
    }
    optional MeasureResult measure_result = 3;
}

// Sync information
message SyncAccept {
    optional string job_id = 1;
    optional int32 chunk_size = 2 [default = 2048];
    optional int32 max_inflight = 3 [default = 4];
}

message SyncState {
    optional string job_id = 1;
    optional int64 rel_start_index = 2;
    optional ComplexVector data = 3;
    optional bool done = 4;
}